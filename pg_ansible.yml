---
all:
  children: # groups definition
    #---------------------------------#
    # pg_oel9                         #
    #---------------------------------#
    pg_oel9:
      hosts: {
          oel9:
            {
              ansible_host: 150.136.124.110,
              ansible_port: 22161,
              ansible_user: root,
              ansible_ssh_pass: root,
            },
        } # ansible_ssh_private_key_file=./files/ansible

    #----------------------------------#
    # pg_rocky9                        #
    #----------------------------------#
    pg_rocky9:
      hosts:
        {
          rocky9:
            {
              ansible_host: 150.136.124.110,
              ansible_port: 22162,
              ansible_user: root,
              ansible_ssh_pass: root,
            },
        }

    #----------------------------------#
    # pg_ubuntu22                      #
    #----------------------------------#
    pg_ubuntu22:
      hosts:
        {
          ubuntu22:
            {
              ansible_host: 150.136.124.110,
              ansible_port: 22163,
              ansible_user: root,
              ansible_ssh_pass: root,
            },
        }

    #----------------------------------#
    # pg_ubuntu24                      #
    #----------------------------------#
    pg_ubuntu24:
      hosts:
        {
          ubuntu24:
            {
              ansible_host: 150.136.124.110,
              ansible_port: 22164,
              ansible_user: root,
              ansible_ssh_pass: root,
            },
        }

  vars:
    #-----------------------------------------------------------------
    # PGSQL_INSTALL
    #-----------------------------------------------------------------
    postgresql_version: "16"
    postgresql_user: "postgres"
    postgresql_data_checksums: true
    postgresql_debian_bin_directory: /usr/lib/postgresql/{{ postgresql_version }}/bin
    postgresql_redhat_bin_directory: /usr/pgsql-{{ postgresql_version }}/bin
    postgresql_redhat_data_dir: "/var/lib/pgsql/{{ postgresql_version }}/data"
    postgresql_debian_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
    postgresql_service_state: started
    postgresql_service_enabled: true
    postgresql_daemon:
      dnf:
        - postgresql-{{ postgresql_version }}
      apt:
        - postgresql
    postgresql_packages:
      dnf:
        - postgresql{{ postgresql_version }}-server
        - postgresql{{ postgresql_version }}-contrib
      apt:
        - postgresql-{{ postgresql_version }}
        - postgresql-contrib-{{ postgresql_version }}

    #-----------------------------------------------------------------
    # PGSQL_CONFIG
    #-----------------------------------------------------------------
    postgresql_unix_socket_directories:
      - /var/run/postgresql
    # List of databases to be created (optional)
    postgresql_databases: []
    # - name: exampledb # required; the rest are optional
    #   lc_collate: # defaults to 'en_US.UTF-8'
    #   lc_ctype: # defaults to 'en_US.UTF-8'
    #   encoding: # defaults to 'UTF-8'
    #   template: # defaults to 'template0'
    #   login_host: # defaults to 'localhost'
    #   login_password: # defaults to not set
    #   login_user: # defaults to '{{ postgresql_user }}'
    #   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
    #   port: # defaults to not set
    #   owner: # defaults to postgresql_user
    #   state: # defaults to 'present'

    # List of database extensions to be created (optional)
    postgresql_database_extensions: []

    # List of users to be created (optional)
    postgresql_users: []
    # - name: jdoe #required; the rest are optional
    #   password: # defaults to not set
    #   encrypted: # defaults to not set
    #   priv: # defaults to not set
    #   role_attr_flags: # defaults to not set
    #   db: # defaults to not set
    #   login_host: # defaults to 'localhost'
    #   login_password: # defaults to not set
    #   login_user: # defaults to '{{ postgresql_user }}'
    #   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
    #   port: # defaults to not set
    #   state: # defaults to 'present'

    # Whether to output user data when managing users.
    postgres_users_no_log: true

    # List of schemas to be created (optional)
    postgresql_database_schemas: []

    # List of user privileges to be applied (optional)
    postgresql_user_privileges: []

    # Global configuration options that will be set in postgresql.conf.
    postgresql_global_config_options: []
    #  - option: listen_addresses
    #    value: *
    #  - option: log_directory
    #    value: 'log'

    # pg_hba.conf
    postgresql_hba_entries: []
    #  - { type: local, database: all, user: postgres, auth_method: peer }
    #  - { type: local, database: all, user: all, auth_method: peer }
    #  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: "{{ postgresql_auth_method }}"}

    #-----------------------------------------------------------------
    # NODE_PATCH
    #-----------------------------------------------------------------
    el_patching_required_packages: "yum-utils"
    el_patching_reboot_timeout: 600
    el_patching_method: "security"
    el_patching_auto_reboot: false

    #-----------------------------------------------------------------
    # NODE_PACKAGE
    #-----------------------------------------------------------------
    proxy_env: # global proxy env when downloading packages
      no_proxy: "localhost,127.0.0.1,10.0.0.0/8,192.168.0.0/16,*.pigsty,*.aliyun.com,mirrors.*,*.myqcloud.com,*.tsinghua.edu.cn"
      # http_proxy:  # set your proxy here: e.g http://user:pass@proxy.xxx.com
      # https_proxy: # set your proxy here: e.g http://user:pass@proxy.xxx.com
      # all_proxy:   # set your proxy here: e.g http://user:pass@proxy.xxx.com
    node_epel_repo: true
    node_disable_selinux: true
    node_disable_firewall: true
    node_packages: []
    node_packages_default: # used according to , if  not set
      dnf:
        - sudo,cronie,python3-psycopg2,glibc-langpack-en
      apt:
        - sudo,cron,python3-psycopg2

    #-----------------------------------------------------------------
    # NODE_ADMIN
    #-----------------------------------------------------------------
    node_data: /data # node main data directory,  by default
    node_admin_enabled: false # create a admin user on target node?
    node_admin_uid: 88 # uid and gid for node admin user
    node_admin_username: dba # name of node admin user,  by default
    node_admin_ssh_exchange: false # exchange admin ssh key among node cluster
    node_admin_pk_current: false # add current user's ssh pk to admin authorized_keys
    node_admin_pk_list: [] # ssh public keys to be added to admin user

    #-----------------------------------------------------------------
    # NODE_TIME
    #-----------------------------------------------------------------
    node_timezone: "" # setup node timezone, empty string to skip
    node_ntp_enabled: true # enable chronyd time sync service?
    node_ntp_servers: # ntp servers in
      - pool pool.ntp.org iburst
    node_crontab_overwrite: true # overwrite or append to ?
    node_crontab: [] # crontab entries in

    #-----------------------------------------------------------------
    # NODE_PRE-CHECKS
    #-----------------------------------------------------------------
    minimal_ansible_version: 2.11.0
    os_valid_distributions:
      - RedHat
      - Rocky
      - OracleLinux
      - Ubuntu
      - Debian
      - AlmaLinux
    os_minimum_versions:
      RedHat: 8
      Rocky: 8.4
      OracleLinux: 8
      Ubuntu: 20.04
      Debian: 10
      AlmaLinux: 8.3

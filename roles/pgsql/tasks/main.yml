---
- name: PostgreSQL | Install PostgreSQL | RHEL
  dnf:
    name:
      - "postgresql{{ postgresql_version_terse }}-server"
      - "postgresql{{ postgresql_version_terse }}"
      - "postgresql{{ postgresql_version_terse }}-contrib"
    state: present
    update_cache: yes
  when: ansible_os_family == "RedHat"

- name: PostgreSQL | Disable postgresql module (necessary for RHEL8+)
  command:
    cmd: dnf module disable postgresql -y
  when: ansible_os_family == "RedHat" and (ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9')
  register: disable_postgresql_module
  changed_when:
    - "disable_postgresql_module.rc == 0"
    - "'Disabling modules:\\n postgresql' in disable_postgresql_module.stdout"

- name: PostgreSQL | Install PostgreSQL | Debian
  apt:
    name:
      - "postgresql-{{postgresql_version}}"
      - "postgresql-client-{{postgresql_version}}"
      - "postgresql-contrib-{{postgresql_version}}"
    state: present
    update_cache: yes
    default_release: "{{postgresql_default_release | default(ansible_distribution_release + '-pgdg')}}"
    cache_valid_time: "{{apt_cache_valid_time | default (3600)}}"
  when: ansible_os_family == "Debian"

# - name: PostgreSQL | PGTune | Debian
#   apt:
#     name: pgtune
#     state: present
#     update_cache: yes
#     cache_valid_time: "{{apt_cache_valid_time | default (3600)}}"
#   environment: "{{postgresql_env}}"
#   when: postgresql_pgtune

#      - name: PostgreSQL | PGTune | RHEL
#        yum:
#          name: pgtune
#          state: present
#        environment: "{{ postgresql_env }}"
#        when: postgresql_pgtune

- name: PostgreSQL | Drop the data directory | RedHat
  file:
    path: "{{ postgresql_data_directory }}"
    state: absent
  register: pgdata_dir_remove
  when: ansible_os_family == "RedHat" and postgresql_cluster_reset

- name: PostgreSQL | Make sure the postgres data directory exists
  file:
    path: "{{postgresql_data_directory}}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
  register: pgdata_dir_exist

- name: PostgreSQL | Ensure the locale for lc_collate and lc_ctype is generated | Debian
  become: yes
  locale_gen: name="{{ item }}" state=present
  with_items:
    - "{{ postgresql_locale }}"
    - "{{ postgresql_ctype }}"
  when: ansible_os_family == "Debian" and item != "C.UTF-8"

- name: PostgreSQL | Ensure the locale is generated | RedHat
  become: yes
  command: localedef -c -i {{ item.parts[0] }} -f {{ item.parts[1] }} {{ item.locale_name }}
  changed_when: false
  with_items:
    - { parts: "{{ postgresql_locale_parts }}", locale_name: "{{ postgresql_locale }}" }
    - { parts: "{{ postgresql_ctype_parts }}", locale_name: "{{ postgresql_ctype }}" }
  when: ansible_os_family == "RedHat"
  ignore_errors: yes

- name: PostgreSQL | Stop PostgreSQL | Debian
  service:
    name: "{{ postgresql_service_name }}"
    state: stopped
  become: yes
  when: ansible_os_family == "Debian" and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Reset the cluster - drop the existing one | Debian
  shell: pg_dropcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Reset the cluster - create a new one (with specified encoding and locale) | Debian
  shell: >
    pg_createcluster --locale {{ postgresql_locale }}
    -e {{ postgresql_encoding }} -d {{ postgresql_data_directory }}
    {{ postgresql_version }} {{ postgresql_cluster_name }}
    --
    {% if postgresql_data_checksums and postgresql_version is version_compare('9.3', '>=') %}--data-checksums{% endif %}
    {% if postgresql_pwfile != "" %}--pwfile={{ postgresql_pwfile }} {% endif %}
    {% if postgresql_wal_directory != "" and postgresql_version is version_compare('10', '<') %}--xlogdir={{ postgresql_wal_directory }} {% endif %}
    {% if postgresql_wal_directory != "" and postgresql_version is version_compare('10', '>=') %}--waldir={{ postgresql_wal_directory }} {% endif %}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Update systemd | Debian
  command: systemctl daemon-reload
  become: yes
  when: ansible_os_family == "Debian" and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Start PostgreSQL | Debian
  service:
    name: "{{ postgresql_service_name }}"
    state: started
  become: yes
  when: ansible_os_family == "Debian" and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Check whether the postgres data directory is initialized | RedHat
  stat:
    path: "{{ postgresql_data_directory }}/PG_VERSION"
  when: ansible_os_family == "RedHat" and not postgresql_cluster_reset
  register: pgdata_dir_initialized

- name: PostgreSQL | Initialize the database | RedHat
  command: >
    {{ postgresql_bin_directory }}/initdb -D {{ postgresql_data_directory }}
    --locale={{ postgresql_locale }} --encoding={{ postgresql_encoding }}
    {% if postgresql_data_checksums and postgresql_version is version_compare('9.3', '>=') %}--data-checksums{% endif %}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "RedHat" and
        (postgresql_cluster_reset or
         pgdata_dir_exist.changed or
         not pgdata_dir_initialized.stat.exists)

- name: PostgreSQL | Verify postgresql cluster version
  command: grep ^{{ postgresql_version }}$ {{ postgresql_data_directory }}/PG_VERSION
  changed_when: false

- name: PostgreSQL | Ensure the systemd directory for PostgreSQL exists | RedHat
  file:
    name: "/etc/systemd/system/postgresql-{{ postgresql_version }}.service.d"
    state: directory
    mode: 0755
  when: ansible_os_family == "RedHat"
  notify: restart postgresql

- name: PostgreSQL | Ensure the pid directory for PostgreSQL exists
  file:
    name: "{{ postgresql_pid_directory }}"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: u=rwX,g=rwXs,o=rx
  notify: restart postgresql

- block:
  - name: PostgreSQL | Ensure PostgreSQL is running
    service:
      name: "{{ postgresql_service_name }}"
      state: started
    register: postgresql_cold_started

  - name: PostgreSQL | Reload PostgreSQL configuration
    service:
      name: "{{ postgresql_service_name }}"
      state: reloaded
    register: postgresql_reloaded
    when: not postgresql_cold_started.changed
...

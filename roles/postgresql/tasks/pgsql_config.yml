---
#--------------------------------------------------------------#
# Get postgresql facts                                 [pg_fact]
#--------------------------------------------------------------#
- name: PostgreSQL Config | get postgresql database Information
  tags: [pg_hba, pg_config, pg_pending]
  become: yes
  become_user: "{{ postgresql_user }}"
  block:
    - name: PostgreSQL Config | Get Information
      community.postgresql.postgresql_info:
      register: pg_info
#    - debug:
#        msg:
#          - "{{ pg_info['settings']['hba_file']['setting'] }}"
#          - "{{ pg_info['version']['major'] }}"
#          - "{{ pg_info['settings']['config_file']['setting'] }}"
#          - "{{ pg_info['settings']['listen_addresses']['pending_restart'] }}"

#--------------------------------------------------------------#
# Config                                             [pg_config]
#--------------------------------------------------------------#
- name: PostgreSQL Config | set postgresql parameter
  tags: pg_config
  become: yes
  become_user: "{{ postgresql_user }}"
  block:
    - name: PostgreSQL Config | configure parameters.
      community.postgresql.postgresql_set:
        name: "{{ item.option }}"
        value: "{{ item.value }}"
      register: set
      #      notify: reload postgresql
      with_items: "{{ postgresql_global_config_options }}"

    #    - debug:
    #        msg:
    #          - "{{ pg_info }}"
    #          - "{{ set }}"

    #    - name: Display variables
    #      ansible.builtin.debug:
    #        msg:
    #          - "x: {{ set.results[0].changed }}"
    #          - "y: {{ set.results[0].name }}"
    #          - "z: {{ set.results[0].restart_required }}"

    - name: PostgreSQL Config | restart postgresql service
      ansible.builtin.debug:
        msg: "{{ set.results[0].name }} {{ set.results[0].prev_val_pretty }} >> {{ set.results[0].value_pretty }} restart_req: {{ set.results[0].restart_required }}"
      when: set.results[0].changed and set.results[0].restart_required
      changed_when: true
      notify: restart postgresql

#--------------------------------------------------------------#
# Create or edit pg_hba.conf                            [pg_hba]
#--------------------------------------------------------------#
- name: PostgreSQL Config | configure host based authentication (if entries are configured).
  tags: [pg_hba]
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ pg_info['settings']['hba_file']['setting'] }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_user }}"
    mode: 0600
  notify: reload postgresql
  become: true
  become_user: "{{ postgresql_user }}"
  when: postgresql_hba_entries | length > 0
  vars:
    postgresql_auth_method: "{{ 'scram-sha-256' if pg_info['version']['major'] > 15 else 'md5' }}"
#--------------------------------------------------------------#
# Users                                                [pg_user]
#--------------------------------------------------------------#
- name: PostgreSQL Config | ensure postgresql users are present.
  tags: pg_user
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_users }}"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  when: postgresql_users|length > 0

#--------------------------------------------------------------#
# Databases                                        [pg_database]
#--------------------------------------------------------------#
- name: PostgreSQL Config | ensure postgresql databases are present.
  tags: pg_database
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('') }}"
    lc_ctype: "{{ item.lc_ctype | default('') }}"
    encoding: "{{ item.encoding | default('') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_user }}"
  when: postgresql_databases|length > 0
#--------------------------------------------------------------#
# Schemas                                            [pg_schema]
#--------------------------------------------------------------#

#--------------------------------------------------------------#
# Users Privileges                                     [pg_priv]
#--------------------------------------------------------------#

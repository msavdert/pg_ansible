---
#--------------------------------------------------------------#
# Pre-checks                                    [node_prechecks]
#--------------------------------------------------------------#
- name: System information
  ansible.builtin.debug:
    var: system_info
  vars:
    system_info:
      OS: "{{ ansible_distribution | default('N/A') }} {{ ansible_distribution_version | default('N/A') }}"
      Kernel: "{{ ansible_kernel | default('N/A') }}"
      CPU model: >-
        {{ ansible_processor[2] | default('N/A') }},
        count: {{ ansible_processor_count | default('N/A') }},
        cores: {{ ansible_processor_cores | default('N/A') }}
      Memory: "{{ (ansible_memtotal_mb / 1024) | round(2) if ansible_memtotal_mb is defined else 'N/A' }} GB"
      Disk space total: >-
        {{
          (ansible_mounts
            | map(attribute='size_total')
            | map('int')
            | sum / 1024 / 1024 / 1024
          )
          | round(2) if ansible_mounts is defined else 'N/A'
        }} GB
      Architecture: "{{ ansible_architecture | default('N/A') }}"
      Virtualization type: "{{ ansible_virtualization_type | default('N/A') }}"
      Product name: "{{ ansible_product_name | default('N/A') }}"
  tags: always

- name: Pre-checks
  tags: prechecks
  ignore_errors: false
  block:
    - name: Checking ansible version
      ansible.builtin.fail:
        msg: "Ansible version must be {{ minimal_ansible_version }} or higher"
      delegate_to: localhost
      when:
        - ansible_version.full is version(minimal_ansible_version, '<')

    - name: Checking Linux distribution
      ansible.builtin.fail:
        msg: "{{ ansible_distribution }} is not supported"
      when: ansible_distribution not in os_valid_distributions

    - name: Checking version of OS Linux
      ansible.builtin.fail:
        msg: "{{ ansible_distribution_version }} of {{ ansible_distribution }} is not supported"
      when: ansible_distribution_version is version_compare(os_minimum_versions[ansible_distribution], '<')
